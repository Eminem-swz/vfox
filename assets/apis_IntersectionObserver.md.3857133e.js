import{o as t,c as e,a as r}from"./app.2bd60a78.js";const d='{"title":"IntersectionObserver","description":"","frontmatter":{},"headers":[{"level":2,"title":"","slug":"vue-prototype-createintersectionobserver-options"},{"level":3,"title":"Params","slug":"params"},{"level":3,"title":"options 的合法值","slug":"options-的合法值"},{"level":3,"title":"Return","slug":"return"},{"level":2,"title":"","slug":"intersectionobserver-1"},{"level":3,"title":"IntersectionObserver.prototype.relativeTo(selector[, margins])","slug":"intersectionobserver-prototype-relativeto-selector-margins"},{"level":3,"title":"IntersectionObserver.prototype.relativeToViewport([margins])","slug":"intersectionobserver-prototype-relativetoviewport-margins"},{"level":3,"title":"IntersectionObserver.prototype.observe(targetSelector[, callback])","slug":"intersectionobserver-prototype-observe-targetselector-callback"},{"level":3,"title":"IntersectionObserver.prototype.disconnect()","slug":"intersectionobserver-prototype-disconnect"}],"relativePath":"apis/IntersectionObserver.md","lastUpdated":1624584443316}',a={},o=r('<h1 id="intersectionobserver"><a class="header-anchor" href="#intersectionobserver" aria-hidden="true">#</a> IntersectionObserver</h1><h2 id="vue-prototype-createintersectionobserver-options"><a class="header-anchor" href="#vue-prototype-createintersectionobserver-options" aria-hidden="true">#</a> <a name="createIntersectionObserver">Vue.prototype.$createIntersectionObserver([options])</a></h2><p>返回一个 IntersectionObserver 对象实例。</p><h3 id="params"><a class="header-anchor" href="#params" aria-hidden="true">#</a> Params</h3><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>options</td><td>Object</td><td></td><td>否</td><td>选项</td></tr></tbody></table><h3 id="options-的合法值"><a class="header-anchor" href="#options-的合法值" aria-hidden="true">#</a> options 的合法值</h3><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>属性</td><td>类型</td><td>默认值</td><td>必填</td><td>说明</td></tr><tr><td>thresholds</td><td>number[]</td><td>[0]</td><td>否</td><td>一个数值数组，包含所有阈值。</td></tr><tr><td>observeAll</td><td>boolean</td><td>false</td><td>否</td><td>是否同时观测多个目标节点（而非一个），如果设为 true ，observe 的 targetSelector 将选中多个节点（注意：同时选中过多节点将影响渲染性能）</td></tr></tbody></table><h3 id="return"><a class="header-anchor" href="#return" aria-hidden="true">#</a> Return</h3><p><a href="#IntersectionObserver">IntersectionObserver</a> 实例</p><h2 id="intersectionobserver-1"><a class="header-anchor" href="#intersectionobserver-1" aria-hidden="true">#</a> <a name="IntersectionObserver">IntersectionObserver</a></h2><p>IntersectionObserver 对象，用于推断某些节点是否可以被用户看见、有多大比例可以被用户看见。</p><h3 id="intersectionobserver-prototype-relativeto-selector-margins"><a class="header-anchor" href="#intersectionobserver-prototype-relativeto-selector-margins" aria-hidden="true">#</a> IntersectionObserver.prototype.relativeTo(selector[, margins])</h3><p>使用选择器指定一个节点，作为参照区域之一。</p><h4 id="params-1"><a class="header-anchor" href="#params-1" aria-hidden="true">#</a> Params</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>selector</td><td>string</td><td></td><td>是</td><td>CSS 选择器。同<code>querySelector</code>参数</td></tr><tr><td>margins</td><td>Object</td><td></td><td>否</td><td>用来扩展（或收缩）参照节点布局区域的边界</td></tr></tbody></table><h4 id="margins-的合法值"><a class="header-anchor" href="#margins-的合法值" aria-hidden="true">#</a> margins 的合法值</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>left</td><td>number</td><td></td><td>否</td><td>节点布局区域的左边界</td></tr><tr><td>right</td><td>number</td><td></td><td>否</td><td>节点布局区域的右边界</td></tr><tr><td>top</td><td>number</td><td></td><td>否</td><td>节点布局区域的上边界</td></tr><tr><td>bottom</td><td>number</td><td></td><td>否</td><td>节点布局区域的下边界</td></tr></tbody></table><h4 id="return-1"><a class="header-anchor" href="#return-1" aria-hidden="true">#</a> Return</h4><p><a href="#IntersectionObserver">IntersectionObserver</a> 实例</p><h3 id="intersectionobserver-prototype-relativetoviewport-margins"><a class="header-anchor" href="#intersectionobserver-prototype-relativetoviewport-margins" aria-hidden="true">#</a> IntersectionObserver.prototype.relativeToViewport([margins])</h3><p>指定页面显示区域作为参照区域之一。</p><h4 id="params-2"><a class="header-anchor" href="#params-2" aria-hidden="true">#</a> Params</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>margins</td><td>Object</td><td></td><td>否</td><td>用来扩展（或收缩）参照节点布局区域的边界</td></tr></tbody></table><h4 id="margins-的合法值-1"><a class="header-anchor" href="#margins-的合法值-1" aria-hidden="true">#</a> margins 的合法值</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>left</td><td>number</td><td></td><td>否</td><td>节点布局区域的左边界</td></tr><tr><td>right</td><td>number</td><td></td><td>否</td><td>节点布局区域的右边界</td></tr><tr><td>top</td><td>number</td><td></td><td>否</td><td>节点布局区域的上边界</td></tr><tr><td>bottom</td><td>number</td><td></td><td>否</td><td>节点布局区域的下边界</td></tr></tbody></table><h4 id="return-2"><a class="header-anchor" href="#return-2" aria-hidden="true">#</a> Return</h4><p><a href="#IntersectionObserver">IntersectionObserver</a> 实例</p><h4 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h4><div class="language-"><pre><code>this.$createIntersectionObserver()\n  .relativeToViewport({ bottom: 100 })\n  .observe(&#39;.target-class&#39;, res =&gt; {\n    res.intersectionRatio // 相交区域占目标节点的布局区域的比例\n    res.intersectionRect // 相交区域\n    res.intersectionRect.left // 相交区域的左边界坐标\n    res.intersectionRect.top // 相交区域的上边界坐标\n    res.intersectionRect.width // 相交区域的宽度\n    res.intersectionRect.height // 相交区域的高度\n  })\n</code></pre></div><h3 id="intersectionobserver-prototype-observe-targetselector-callback"><a class="header-anchor" href="#intersectionobserver-prototype-observe-targetselector-callback" aria-hidden="true">#</a> IntersectionObserver.prototype.observe(targetSelector[, callback])</h3><p>指定目标节点并开始监听相交状态变化情况。</p><h4 id="params-3"><a class="header-anchor" href="#params-3" aria-hidden="true">#</a> Params</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>targetSelector</td><td>string</td><td></td><td>是</td><td>CSS 选择器。同<code>querySelector</code>参数</td></tr><tr><td>callback</td><td>Function</td><td></td><td>否</td><td>监听相交状态变化的回调函数</td></tr></tbody></table><h4 id="callback-参数-res-的结构"><a class="header-anchor" href="#callback-参数-res-的结构" aria-hidden="true">#</a> callback 参数 res 的结构</h4><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>intersectionRatio</td><td>number</td><td>相交比例</td></tr><tr><td>intersectionRect</td><td>Object</td><td>相交区域的边界</td></tr><tr><td>boundingClientRect</td><td>Object</td><td>目标边界</td></tr><tr><td>relativeRect</td><td>Object</td><td>参照区域的边界</td></tr><tr><td>time</td><td>number</td><td>相交检测时的时间戳</td></tr></tbody></table><h4 id="callback-参数-res-intersectionrect-的结构"><a class="header-anchor" href="#callback-参数-res-intersectionrect-的结构" aria-hidden="true">#</a> callback 参数 res.intersectionRect 的结构</h4><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>left</td><td>number</td><td>左边界</td></tr><tr><td>right</td><td>number</td><td>右边界</td></tr><tr><td>top</td><td>number</td><td>上边界</td></tr><tr><td>bottom</td><td>number</td><td>下边界</td></tr><tr><td>width</td><td>number</td><td>宽度</td></tr><tr><td>height</td><td>number</td><td>高度</td></tr></tbody></table><h4 id="callback-参数-res-boundingclientrect-的结构"><a class="header-anchor" href="#callback-参数-res-boundingclientrect-的结构" aria-hidden="true">#</a> callback 参数 res.boundingClientRect 的结构</h4><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>left</td><td>number</td><td>左边界</td></tr><tr><td>right</td><td>number</td><td>右边界</td></tr><tr><td>top</td><td>number</td><td>上边界</td></tr><tr><td>bottom</td><td>number</td><td>下边界</td></tr><tr><td>width</td><td>number</td><td>宽度</td></tr><tr><td>height</td><td>number</td><td>高度</td></tr></tbody></table><h4 id="callback-参数-res-relativerect-的结构"><a class="header-anchor" href="#callback-参数-res-relativerect-的结构" aria-hidden="true">#</a> callback 参数 res.relativeRect 的结构</h4><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>left</td><td>number</td><td>左边界</td></tr><tr><td>right</td><td>number</td><td>右边界</td></tr><tr><td>top</td><td>number</td><td>上边界</td></tr><tr><td>bottom</td><td>number</td><td>下边界</td></tr></tbody></table><h3 id="intersectionobserver-prototype-disconnect"><a class="header-anchor" href="#intersectionobserver-prototype-disconnect" aria-hidden="true">#</a> IntersectionObserver.prototype.disconnect()</h3><p>停止监听。回调函数将不再触发。</p>',43);a.render=function(r,d,a,h,n,s){return t(),e("div",null,[o])};export default a;export{d as __pageData};
