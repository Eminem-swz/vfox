import{o as t,c as e,a as d}from"./app.28c4bf22.js";const a='{"title":"ImageUploader 图片上传","description":"","frontmatter":{},"headers":[{"level":2,"title":"Props","slug":"props"},{"level":3,"title":"beforeUpload(file: File, handlers: Object) => boolean | file | Promise","slug":"beforeupload-file-file-handlers-object-boolean-file-promise-boolean-file"},{"level":3,"title":"uploadReady(file: File, handlers: Object) => void","slug":"uploadready-file-file-handlers-object-void"},{"level":2,"title":"Events","slug":"events"},{"level":3,"title":"delete 的回调参数 item","slug":"delete-的回调参数-item"}],"relativePath":"components/ImageUploader.md","lastUpdated":1624583539153}',r={},l=d('<h1 id="imageuploader-图片上传"><a class="header-anchor" href="#imageuploader-图片上传" aria-hidden="true">#</a> ImageUploader 图片上传</h1><ul><li>类似于微信朋友圈上传图片的组件。</li><li>可以配合 <a href="./Form.html">Form</a> 和 <a href="./Form.html#formitem-表单项">FormItem</a> 使用。</li></ul><h2 id="props"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h2><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>v-model</td><td>string[]</td><td></td><td>是</td><td>已上传的图片 URL 列表</td></tr><tr><td>accept</td><td>string</td><td></td><td>否</td><td>默认 &#39;all&#39;, 可选 &#39;jpg&#39; &#39;jpeg&#39; &#39;png&#39; &#39;webp&#39;，目前移动端图片类型不多，限制比较死</td></tr><tr><td>column-number</td><td>number</td><td>3</td><td>否</td><td>渲染列数，同 <a href="./Order.html">Order</a> 组件</td></tr><tr><td>max-count</td><td>number</td><td>9</td><td>否</td><td>文件上传数量限制，上传中/上传失败也会占一个坑位</td></tr><tr><td>preview</td><td>boolean</td><td>true</td><td>否</td><td>是否在点击缩略图后展示全屏图片预览</td></tr><tr><td>disabled</td><td>boolean</td><td>false</td><td>否</td><td>是否禁用文件上传</td></tr><tr><td>multiple</td><td>boolean</td><td>false</td><td>否</td><td>是否开启图片多选，部分安卓机型不支持</td></tr><tr><td>deletable</td><td>boolean</td><td>true</td><td>否</td><td>是否允许删除图片</td></tr><tr><td>image-mode</td><td>string</td><td>&#39;aspectFill&#39;</td><td>否</td><td>图片的填充模式，通 <a href="./Image.html">Image</a> 组件的 mode 属性</td></tr><tr><td>before-upload</td><td>Function</td><td></td><td>否</td><td>文件读取前的回调函数，返回 false 或 Promise&lt;false&gt; 可终止文件上传</td></tr><tr><td>upload-ready</td><td>Function</td><td></td><td>否</td><td>转入上传文件操作的回调函数</td></tr></tbody></table><h3 id="beforeupload-file-file-handlers-object-boolean-file-promise-boolean-file"><a class="header-anchor" href="#beforeupload-file-file-handlers-object-boolean-file-promise-boolean-file" aria-hidden="true">#</a> beforeUpload(file: File, handlers: Object) =&gt; boolean | file | Promise&lt;boolean | file&gt;</h3><p>通过传入 beforeUpload 函数可以在上传前进行校验和处理，返回 false 或 Promise&lt;false&gt; 表示校验失败。</p><p>也可以返回修改过的 file 对象，如果压缩图片等。</p><h4 id="beforeupload-的-handlers-提供的方法"><a class="header-anchor" href="#beforeupload-的-handlers-提供的方法" aria-hidden="true">#</a> beforeUpload 的 handlers 提供的方法</h4><table><thead><tr><th>handlers 方法</th><th>参数返回</th><th>说明</th></tr></thead><tbody><tr><td>handlers.formatSize</td><td>(size: number) =&gt; string</td><td>把图片的文件大小数值转为可读的，如 10MB, 10.5KB</td></tr></tbody></table><div class="language-"><pre><code>&lt;fx-image-uploader :beforeUpload=&quot;onBeforeUpload&quot; /&gt;\n</code></pre></div><div class="language-"><pre><code>export default {\n  methods: {\n    onBeforeUpload(file, { formatSize }) {\n      if (file.size &gt; 1024 * 1024) {\n        Toast.showToast(`上传图片不能大于 ${formatSize(1024 * 1024)}`)\n        return false\n      }\n      Toast.showToast(`上传图片大小为 ${formatSize(file.size)}`)\n    }\n  }\n}\n</code></pre></div><h3 id="uploadready-file-file-handlers-object-void"><a class="header-anchor" href="#uploadready-file-file-handlers-object-void" aria-hidden="true">#</a> uploadReady(file: File, handlers: Object) =&gt; void</h3><p>在该节点中将文件上传至服务器。</p><table><thead><tr><th>handlers 方法</th><th>参数返回</th><th>说明</th></tr></thead><tbody><tr><td>handlers.getUploadId</td><td>() =&gt; number</td><td>获取图片上传分配的唯一值</td></tr><tr><td>handlers.formatSize</td><td>(size: number) =&gt; string</td><td>把图片的文件大小数值转为可读的，如 10MB, 10.5KB</td></tr><tr><td>handlers.setUploading</td><td>(message: string) =&gt; void</td><td>设置图片上传状态为上传中</td></tr><tr><td>handlers.success</td><td>(url: string) =&gt; void</td><td>设置图片上传状态为上传成功，传入接口返回的 URL</td></tr><tr><td>handlers.fail</td><td>(e: Error | string ) =&gt; void</td><td>设置图片上传状态为上传失败，传入错误信息</td></tr></tbody></table><p>PS：整个上传流程分为 3 个阶段：reading -&gt; uploading -&gt; uploaded | failed，handlers 提供的改变状态方法是不可逆的。</p><div class="language-"><pre><code>&lt;fx-image-uploader :uploadReady=&quot;onUpload&quot; /&gt;\n</code></pre></div><div class="language-"><pre><code>export default {\n  methods: {\n    onUpload(file, handlers) {\n      handlers.setUploading(&#39;上传中...&#39;)\n\n      setTimeout(() =&gt; {\n        customGetFileUrl(file).then(url =&gt; {\n          if (Math.random() &gt; 0.5) {\n            handlers.fail(&#39;模拟失败&#39;)\n          } else {\n            handlers.success(url)\n          }\n        })\n      }, 2000)\n    }\n  }\n}\n</code></pre></div><h2 id="events"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h2><table><thead><tr><th>事件</th><th>描述</th><th>回调函数参数</th></tr></thead><tbody><tr><td>delete</td><td>图片被删除时触发</td><td>{ index: number, item: { id: number, status: string, url: string } }</td></tr><tr><td>change</td><td>已上传的图片 URL 列表改变时</td><td>{ value: string[] }</td></tr></tbody></table><h3 id="delete-的回调参数-item"><a class="header-anchor" href="#delete-的回调参数-item" aria-hidden="true">#</a> delete 的回调参数 item</h3><table><thead><tr><th>值</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>number</td><td>图片上传项分配的唯一值</td></tr><tr><td>status</td><td>string</td><td>reading(uploadReady 后)，uploading，uploaded，failed</td></tr><tr><td>url</td><td>string</td><td>图片 URL 地址</td></tr></tbody></table>',21);r.render=function(d,a,r,o,i,n){return t(),e("div",null,[l])};export default r;export{a as __pageData};
