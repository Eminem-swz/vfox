import{o as e,c as t,a}from"./app.28c4bf22.js";const r='{"title":"LocalStorage 本地缓存","description":"","frontmatter":{},"headers":[{"level":2,"title":"LocalStorage.getStorage(key)","slug":"localstorage-getstorage-key"},{"level":3,"title":"Params","slug":"params"},{"level":3,"title":"Return","slug":"return"},{"level":3,"title":"Usage","slug":"usage"},{"level":2,"title":"LocalStorage.setStorage(key, value)","slug":"localstorage-setstorage-key-value"},{"level":3,"title":"Params","slug":"params-1"},{"level":3,"title":"Usage","slug":"usage-1"},{"level":2,"title":"LocalStorage.removeStorage(key)","slug":"localstorage-removestorage-key"},{"level":3,"title":"Params","slug":"params-2"},{"level":3,"title":"Usage","slug":"usage-2"},{"level":2,"title":"LocalStorage.clearStorage()","slug":"localstorage-clearstorage"},{"level":3,"title":"Usage","slug":"usage-3"},{"level":2,"title":"LocalStorage.getStorageInfo()","slug":"localstorage-getstorageinfo"},{"level":3,"title":"Return","slug":"return-1"},{"level":3,"title":"Usage","slug":"usage-4"},{"level":2,"title":"LocalStorage.createStorage(areaName[, options])","slug":"localstorage-createstorage-areaname-options"},{"level":3,"title":"Params","slug":"params-3"},{"level":3,"title":"Return","slug":"return-2"},{"level":3,"title":"Usage","slug":"usage-5"}],"relativePath":"apis/LocalStorage.md","lastUpdated":1624583539153}',o={},d=a('<h1 id="localstorage-本地缓存"><a class="header-anchor" href="#localstorage-本地缓存" aria-hidden="true">#</a> LocalStorage 本地缓存</h1><ul><li><p>原本定义的 <code>localStorage</code> 是只有 string 类型的 value 。</p></li><li><p>封装的接口支持序列化数据，序列化和反序列化操作由接口内部实现。</p></li></ul><h2 id="localstorage-getstorage-key"><a class="header-anchor" href="#localstorage-getstorage-key" aria-hidden="true">#</a> LocalStorage.getStorage(key)</h2><h3 id="params"><a class="header-anchor" href="#params" aria-hidden="true">#</a> Params</h3><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>string</td><td></td><td>是</td><td>本地缓存中指定的 key</td></tr></tbody></table><h3 id="return"><a class="header-anchor" href="#return" aria-hidden="true">#</a> Return</h3><p>any data</p><p>key 对应的内容</p><h3 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><div class="language-"><pre><code>import { LocalStorage } from &#39;vfox&#39;\n\ntry {\n  const value = LocalStorage.getStorageSync(&#39;key&#39;)\n  if (value) {\n    // Do something with return value\n  }\n} catch (e) {\n  // Do something when catch error\n}\n</code></pre></div><h2 id="localstorage-setstorage-key-value"><a class="header-anchor" href="#localstorage-setstorage-key-value" aria-hidden="true">#</a> LocalStorage.setStorage(key, value)</h2><h3 id="params-1"><a class="header-anchor" href="#params-1" aria-hidden="true">#</a> Params</h3><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>string</td><td></td><td>是</td><td>本地缓存中指定的 key</td></tr><tr><td>data</td><td>any</td><td></td><td>是</td><td>需要存储的内容。只支持原生类型、Date、及能够通过 JSON.stringify 序列化的对象</td></tr></tbody></table><h3 id="usage-1"><a class="header-anchor" href="#usage-1" aria-hidden="true">#</a> Usage</h3><div class="language-"><pre><code>import { LocalStorage } from &#39;vfox&#39;\n\ntry {\n  LocalStorage.setStorageSync(&#39;key&#39;, &#39;value&#39;)\n} catch (e) { }\n</code></pre></div><h2 id="localstorage-removestorage-key"><a class="header-anchor" href="#localstorage-removestorage-key" aria-hidden="true">#</a> LocalStorage.removeStorage(key)</h2><h3 id="params-2"><a class="header-anchor" href="#params-2" aria-hidden="true">#</a> Params</h3><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>string</td><td></td><td>是</td><td>本地缓存中指定的 key</td></tr></tbody></table><h3 id="usage-2"><a class="header-anchor" href="#usage-2" aria-hidden="true">#</a> Usage</h3><div class="language-"><pre><code>import { LocalStorage } from &#39;vfox&#39;\n\ntry {\n  LocalStorage.removeStorageSync(&#39;key&#39;)\n} catch (e) {\n  // Do something when catch error\n}\n</code></pre></div><h2 id="localstorage-clearstorage"><a class="header-anchor" href="#localstorage-clearstorage" aria-hidden="true">#</a> LocalStorage.clearStorage()</h2><h3 id="usage-3"><a class="header-anchor" href="#usage-3" aria-hidden="true">#</a> Usage</h3><div class="language-"><pre><code>import { LocalStorage } from &#39;vfox&#39;\n\ntry {\n  LocalStorage.clearStorageSync()\n} catch(e) {\n  // Do something when catch error\n}\n</code></pre></div><h2 id="localstorage-getstorageinfo"><a class="header-anchor" href="#localstorage-getstorageinfo" aria-hidden="true">#</a> LocalStorage.getStorageInfo()</h2><h3 id="return-1"><a class="header-anchor" href="#return-1" aria-hidden="true">#</a> Return</h3><p>Object object</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>keys</td><td>string</td><td>当前 storage 中所有的 key</td></tr><tr><td>currentSize</td><td>number</td><td>当前占用的空间大小, 单位 KB</td></tr><tr><td>limitSize</td><td>number</td><td>限制的空间大小，单位 KB</td></tr></tbody></table><h3 id="usage-4"><a class="header-anchor" href="#usage-4" aria-hidden="true">#</a> Usage</h3><div class="language-"><pre><code>import { LocalStorage } from &#39;vfox&#39;\n\ntry {\n  const res = LocalStorage.getStorageInfoSync()\n  console.log(res.keys)\n  console.log(res.currentSize)\n  console.log(res.limitSize)\n} catch (e) {\n  // Do something when catch error\n}\n</code></pre></div><h2 id="localstorage-createstorage-areaname-options"><a class="header-anchor" href="#localstorage-createstorage-areaname-options" aria-hidden="true">#</a> LocalStorage.createStorage(areaName[, options])</h2><p>创建指定分区的实例，来维护自身缓存，避免缓存污染全局。</p><h3 id="params-3"><a class="header-anchor" href="#params-3" aria-hidden="true">#</a> Params</h3><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>string</td><td></td><td>是</td><td>分区名，如 <code>myArea</code></td></tr><tr><td>options</td><td>object</td><td></td><td>否</td><td>配置项</td></tr></tbody></table><h4 id="options-的-params"><a class="header-anchor" href="#options-的-params" aria-hidden="true">#</a> options 的 Params</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>perLimitSize</td><td>number</td><td>1024</td><td>否</td><td>单次缓存最大 kb</td></tr><tr><td>limitSize</td><td>number</td><td>2560</td><td>否</td><td>分区缓存最大 kb</td></tr></tbody></table><h3 id="return-2"><a class="header-anchor" href="#return-2" aria-hidden="true">#</a> Return</h3><p><code>StorageArea</code> 实例，可以操作指定分区的本地缓存。</p><h3 id="usage-5"><a class="header-anchor" href="#usage-5" aria-hidden="true">#</a> Usage</h3><div class="language-"><pre><code>import { LocalStorage } from &#39;vfox&#39;\n\nconst myArea = LocalStorage.createStorage(&#39;myArea&#39;, { limitSize: 1000 })\nmyArea.setStorage(&#39;a&#39;, 1)\n</code></pre></div>',39);o.render=function(a,r,o,l,h,s){return e(),t("div",null,[d])};export default o;export{r as __pageData};
