import{o as e,c as t,a as r}from"./app.2bd60a78.js";const a='{"title":"SelectorQuery","description":"","frontmatter":{},"headers":[{"level":2,"title":"","slug":"vue-prototype-createselectorquery"},{"level":3,"title":"Return","slug":"return"},{"level":3,"title":"Usage","slug":"usage"},{"level":2,"title":"","slug":"selectorquery-1"},{"level":3,"title":"SelectorQuery.prototype.in(component)","slug":"selectorquery-prototype-in-component"},{"level":3,"title":"SelectorQuery.prototype.select(selector)","slug":"selectorquery-prototype-select-selector"},{"level":3,"title":"SelectorQuery.prototype.selectAll(selector)","slug":"selectorquery-prototype-selectall-selector"},{"level":3,"title":"SelectorQuery.prototype.selectViewport()","slug":"selectorquery-prototype-selectviewport"},{"level":3,"title":"SelectorQuery.prototype.exec([callback])","slug":"selectorquery-prototype-exec-callback"},{"level":2,"title":"","slug":"nodesref"},{"level":3,"title":"NodesRef.prototype.boundingClientRect([callback])","slug":"nodesref-prototype-boundingclientrect-callback"},{"level":3,"title":"NodesRef.prototype.scrollOffset([callback])","slug":"nodesref-prototype-scrolloffset-callback"},{"level":3,"title":"Return","slug":"return-7"},{"level":3,"title":"NodesRef.prototype.fields(fields[, callback])","slug":"nodesref-prototype-fields-fields-callback"}],"relativePath":"apis/SelectorQuery.md","lastUpdated":1624584443316}',d={},l=r('<h1 id="selectorquery"><a class="header-anchor" href="#selectorquery" aria-hidden="true">#</a> SelectorQuery</h1><h2 id="vue-prototype-createselectorquery"><a class="header-anchor" href="#vue-prototype-createselectorquery" aria-hidden="true">#</a> <a name="createSelectorQuery">Vue.prototype.$createSelectorQuery()</a></h2><p>返回一个 SelectorQuery 对象实例。</p><h3 id="return"><a class="header-anchor" href="#return" aria-hidden="true">#</a> Return</h3><p><a href="#SelectorQuery">SelectorQuery</a> 实例</p><h3 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><div class="language-"><pre><code>const query = this.$createSelectorQuery()\nquery.select(&#39;#id&#39;).boundingClientRect()\nquery.selectViewport().scrollOffset()\nquery.exec(function(res) {\n  res[0].top // #id节点的上边界坐标\n  res[1].scrollTop // 显示区域的竖直滚动位置\n})\n</code></pre></div><h2 id="selectorquery-1"><a class="header-anchor" href="#selectorquery-1" aria-hidden="true">#</a> <a name="SelectorQuery">SelectorQuery</a></h2><p>查询节点信息的对象。</p><h3 id="selectorquery-prototype-in-component"><a class="header-anchor" href="#selectorquery-prototype-in-component" aria-hidden="true">#</a> <a href="http://SelectorQuery.prototype.in" target="_blank" rel="noopener noreferrer">SelectorQuery.prototype.in</a>(component)</h3><p>将选择器的选取范围更改为其他 VueComponent 组件内。</p><h4 id="params"><a class="header-anchor" href="#params" aria-hidden="true">#</a> Params</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>component</td><td>VueComponent</td><td></td><td>是</td><td>Vue 组件实例</td></tr></tbody></table><h4 id="return-1"><a class="header-anchor" href="#return-1" aria-hidden="true">#</a> Return</h4><p><a href="#SelectorQuery">SelectorQuery</a> 实例</p><h3 id="selectorquery-prototype-select-selector"><a class="header-anchor" href="#selectorquery-prototype-select-selector" aria-hidden="true">#</a> SelectorQuery.prototype.select(selector)</h3><p>在当前页面下选择第一个匹配选择器 selector 的节点。返回一个 NodesRef 对象实例，可以用于获取节点信息。</p><h4 id="params-1"><a class="header-anchor" href="#params-1" aria-hidden="true">#</a> Params</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>selector</td><td>string</td><td></td><td>是</td><td>CSS 选择器。同<code>querySelector</code></td></tr></tbody></table><h4 id="return-2"><a class="header-anchor" href="#return-2" aria-hidden="true">#</a> Return</h4><p><a href="#NodesRef">NodesRef</a> 实例</p><h4 id="usage-1"><a class="header-anchor" href="#usage-1" aria-hidden="true">#</a> Usage</h4><div class="language-"><pre><code>this.$createSelectorQuery()\n  .select(&#39;#id&#39;)\n  .boundingClientRect(function(rect) {\n    rect.id // 节点的ID\n    rect.dataset // 节点的dataset\n    rect.left // 节点的左边界坐标\n    rect.right // 节点的右边界坐标\n    rect.top // 节点的上边界坐标\n    rect.bottom // 节点的下边界坐标\n    rect.width // 节点的宽度\n    rect.height // 节点的高度\n  })\n  .exec()\n</code></pre></div><h3 id="selectorquery-prototype-selectall-selector"><a class="header-anchor" href="#selectorquery-prototype-selectall-selector" aria-hidden="true">#</a> SelectorQuery.prototype.selectAll(selector)</h3><p>在当前页面下选择匹配选择器 selector 的所有节点。返回一个 NodesRef 对象实例，可以用于获取节点信息。</p><h4 id="params-2"><a class="header-anchor" href="#params-2" aria-hidden="true">#</a> Params</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>selector</td><td>string</td><td></td><td>是</td><td>CSS 选择器。同<code>querySelectorAll</code></td></tr></tbody></table><h4 id="return-3"><a class="header-anchor" href="#return-3" aria-hidden="true">#</a> Return</h4><p><a href="#NodesRef">NodesRef</a> 实例</p><h4 id="usage-2"><a class="header-anchor" href="#usage-2" aria-hidden="true">#</a> Usage</h4><div class="language-"><pre><code>this.$createSelectorQuery()\n  .selectAll(&#39;.a-class&#39;)\n  .boundingClientRect(function(rects) {\n    rects.forEach(function(rect) {\n      rect.id // 节点的ID\n      rect.dataset // 节点的dataset\n      rect.left // 节点的左边界坐标\n      rect.right // 节点的右边界坐标\n      rect.top // 节点的上边界坐标\n      rect.bottom // 节点的下边界坐标\n      rect.width // 节点的宽度\n      rect.height // 节点的高度\n    })\n  })\n  .exec()\n</code></pre></div><h3 id="selectorquery-prototype-selectviewport"><a class="header-anchor" href="#selectorquery-prototype-selectviewport" aria-hidden="true">#</a> SelectorQuery.prototype.selectViewport()</h3><p>选择显示区域。可用于获取显示区域的尺寸、滚动位置等信息。返回一个 NodesRef 对象实例，可以用于获取节点信息。</p><h4 id="return-4"><a class="header-anchor" href="#return-4" aria-hidden="true">#</a> Return</h4><p><a href="#NodesRef">NodesRef</a> 实例</p><h4 id="usage-3"><a class="header-anchor" href="#usage-3" aria-hidden="true">#</a> Usage</h4><div class="language-"><pre><code>this.$createSelectorQuery()\n  .selectViewport()\n  .scrollOffset(function(res) {\n    res.id // 节点的ID\n    res.dataset // 节点的dataset\n    res.scrollLeft // 节点的水平滚动位置\n    res.scrollTop // 节点的竖直滚动位置\n  })\n  .exec()\n</code></pre></div><h3 id="selectorquery-prototype-exec-callback"><a class="header-anchor" href="#selectorquery-prototype-exec-callback" aria-hidden="true">#</a> SelectorQuery.prototype.exec([callback])</h3><p>执行所有的请求。请求结果按请求次序构成数组，在 callback 的第一个参数中返回。</p><h4 id="params-3"><a class="header-anchor" href="#params-3" aria-hidden="true">#</a> Params</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>callback</td><td>Function</td><td></td><td>否</td><td>回调函数</td></tr></tbody></table><h4 id="return-5"><a class="header-anchor" href="#return-5" aria-hidden="true">#</a> Return</h4><p><a href="#NodesRef">NodesRef</a> 实例</p><h2 id="nodesref"><a class="header-anchor" href="#nodesref" aria-hidden="true">#</a> <a name="NodesRef">NodesRef</a></h2><h3 id="nodesref-prototype-boundingclientrect-callback"><a class="header-anchor" href="#nodesref-prototype-boundingclientrect-callback" aria-hidden="true">#</a> NodesRef.prototype.boundingClientRect([callback])</h3><p>添加节点的布局位置的查询请求。返回 NodesRef 对应的 SelectorQuery。</p><h4 id="params-4"><a class="header-anchor" href="#params-4" aria-hidden="true">#</a> Params</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>callback</td><td>Function</td><td></td><td>否</td><td>回调函数，在执行 mySelectorQuery.exec 方法后，节点信息会在 callback 中返回</td></tr></tbody></table><h4 id="callback-参数-res-的结构"><a class="header-anchor" href="#callback-参数-res-的结构" aria-hidden="true">#</a> callback 参数 res 的结构</h4><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>string</td><td>节点的 ID</td></tr><tr><td>dataset</td><td>Object</td><td>节点的 dataset</td></tr><tr><td>left</td><td>number</td><td>节点的左边界坐标</td></tr><tr><td>right</td><td>number</td><td>节点的右边界坐标</td></tr><tr><td>top</td><td>number</td><td>节点的上边界坐标</td></tr><tr><td>bottom</td><td>number</td><td>节点的下边界坐标</td></tr><tr><td>width</td><td>number</td><td>节点的宽度</td></tr><tr><td>height</td><td>number</td><td>节点的高度</td></tr></tbody></table><h4 id="return-6"><a class="header-anchor" href="#return-6" aria-hidden="true">#</a> Return</h4><p><a href="#SelectorQuery">SelectorQuery</a> 实例</p><h4 id="usage-4"><a class="header-anchor" href="#usage-4" aria-hidden="true">#</a> Usage</h4><div class="language-"><pre><code>this.$createSelectorQuery()\n  .selectAll(&#39;.a-class&#39;)\n  .boundingClientRect(function(rects) {\n    rects.forEach(function(rect) {\n      rect.id // 节点的ID\n      rect.dataset // 节点的dataset\n      rect.left // 节点的左边界坐标\n      rect.right // 节点的右边界坐标\n      rect.top // 节点的上边界坐标\n      rect.bottom // 节点的下边界坐标\n      rect.width // 节点的宽度\n      rect.height // 节点的高度\n    })\n  })\n  .exec()\n</code></pre></div><h3 id="nodesref-prototype-scrolloffset-callback"><a class="header-anchor" href="#nodesref-prototype-scrolloffset-callback" aria-hidden="true">#</a> NodesRef.prototype.scrollOffset([callback])</h3><p>添加节点的滚动位置查询请求。返回 NodesRef 对应的 SelectorQuery。</p><h4 id="params-5"><a class="header-anchor" href="#params-5" aria-hidden="true">#</a> Params</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>callback</td><td>Function</td><td></td><td>否</td><td>回调函数，在执行 mySelectorQuery.exec 方法后，节点信息会在 callback 中返回</td></tr></tbody></table><h4 id="callback-参数-res-的结构-1"><a class="header-anchor" href="#callback-参数-res-的结构-1" aria-hidden="true">#</a> callback 参数 res 的结构</h4><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>string</td><td>节点的 ID</td></tr><tr><td>dataset</td><td>Object</td><td>节点的 dataset</td></tr><tr><td>scrollLeft</td><td>number</td><td>节点的水平滚动位置</td></tr><tr><td>scrollTop</td><td>number</td><td>节点的竖直滚动位置</td></tr></tbody></table><h3 id="return-7"><a class="header-anchor" href="#return-7" aria-hidden="true">#</a> Return</h3><p><a href="#SelectorQuery">SelectorQuery</a> 实例</p><h4 id="usage-5"><a class="header-anchor" href="#usage-5" aria-hidden="true">#</a> Usage</h4><div class="language-"><pre><code>this.$createSelectorQuery()\n  .selectViewport()\n  .scrollOffset(function(res) {\n    res.id // 节点的ID\n    res.dataset // 节点的dataset\n    res.scrollLeft // 节点的水平滚动位置\n    res.scrollTop // 节点的竖直滚动位置\n  })\n  .exec()\n</code></pre></div><h3 id="nodesref-prototype-fields-fields-callback"><a class="header-anchor" href="#nodesref-prototype-fields-fields-callback" aria-hidden="true">#</a> NodesRef.prototype.fields(fields[, callback])</h3><p>获取节点的相关信息。需要获取的字段在 fields 中指定。返回 NodesRef 对应的 SelectorQuery。</p><h4 id="params-6"><a class="header-anchor" href="#params-6" aria-hidden="true">#</a> Params</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>fields</td><td>Object</td><td></td><td>是</td><td>指定获取字段</td></tr><tr><td>callback</td><td>Function</td><td></td><td>否</td><td>回调函数，在执行 mySelectorQuery.exec 方法后，节点信息会在 callback 中返回</td></tr></tbody></table><h4 id="fields-的合法值"><a class="header-anchor" href="#fields-的合法值" aria-hidden="true">#</a> fields 的合法值</h4><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>boolean</td><td>false</td><td>否</td><td>是否返回节点 id</td></tr><tr><td>dataset</td><td>boolean</td><td>false</td><td>否</td><td>是否返回节点 dataset</td></tr><tr><td>rect</td><td>boolean</td><td>false</td><td>否</td><td>是否返回节点布局位置（left right top bottom）</td></tr><tr><td>size</td><td>boolean</td><td>false</td><td>否</td><td>是否返回节点尺寸（width height）</td></tr><tr><td>scrollOffset</td><td>boolean</td><td>false</td><td>否</td><td>是否返回节点的（scrollLeft scrollTop）</td></tr><tr><td>properties</td><td>string[]</td><td>[]</td><td>否</td><td>指定属性名列表，返回节点对应属性名的当前属性值</td></tr><tr><td>computedStyle</td><td>string[]</td><td>[]</td><td>否</td><td>指定样式名列表，返回节点对应样式名的当前值</td></tr></tbody></table><h4 id="callback-参数-res-的结构-2"><a class="header-anchor" href="#callback-参数-res-的结构-2" aria-hidden="true">#</a> callback 参数 res 的结构</h4><p>节点的相关信息。</p><h4 id="return-8"><a class="header-anchor" href="#return-8" aria-hidden="true">#</a> Return</h4><p><a href="#SelectorQuery">SelectorQuery</a> 实例</p><h4 id="usage-6"><a class="header-anchor" href="#usage-6" aria-hidden="true">#</a> Usage</h4><div class="language-"><pre><code>this.$createSelectorQuery()\n  .select(&#39;#id&#39;)\n  .fields(\n    {\n      dataset: true,\n      size: true,\n      scrollOffset: true,\n      properties: [&#39;scrollWidth&#39;],\n      computedStyle: [&#39;margin&#39;, &#39;backgroundColor&#39;]\n    },\n    function(res) {\n      res.dataset // 节点的 dataset\n      res.width // 节点的宽度\n      res.height // 节点的高度\n      res.scrollLeft // 节点的水平滚动位置\n      res.scrollTop // 节点的竖直滚动位置\n      res.scrollWidth // 节点 scrollWidth 属性的当前值\n      // 此处返回指定要返回的样式名\n      res.margin\n      res.backgroundColor\n    }\n  )\n  .exec()\n</code></pre></div>',76);d.render=function(r,a,d,o,c,h){return e(),t("div",null,[l])};export default d;export{a as __pageData};
